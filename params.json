{
  "name": "Pipeline ICG",
  "tagline": "Implementação de transformações geométricas em primitivas",
  "body": "# Introdução\r\nEste post faz parte do segundo trabalho da disciplina Introdução à Computação Gráfica, ministrada pelo Prof. Christian Azambuja Pagot da UFPB, no período 2016.1.\r\n\r\nDeve ser implementado um Pipeline Gráfico, que é um conjunto de transformações geométricas em um objeto descrito inicialmente em um sistema de coordenadas próprio (ou Espaço do Objeto) e através dessas transformações, o levaremos ao Espaço da Tela, e o desenharemos usando os algoritmos usados e desenvolvidos no [primeiro trabalho da disciplina](https://soaresgabriel.github.io/TrabalhoICG/).\r\n\r\nAlém das ferramentas já usadas no primeiro trabalho, será usada também um objLoader (já disponibilizado pelo professor) para que possamos carregar o objeto a partir de um arquivo .obj, que descreve vértices e triângulos que compõe o objeto, e também será utilizado a biblioteca Eigen, para possibilitar operações entre matrizes e vetores.\r\n\r\n### Espaço Homogêneo\r\nFaremos uso do Espaço Homogêneo nesse trabalho, veremos que ele possibilita a resolução de alguns problemas relacionado as transformações. Podemos derivar um Espaço Homogêneo, adicionando uma coordenada 'W' a pontos do espaço Euclidiano, chamamos essa de Coordenada Homogênea, dessa forma, um ponto no Espaço Euclidiano tem infinitos representantes no Espaço Homogêneo da seguinte forma:\r\n`[Euclidiano] (X, Y, Z) ⇒ (X/W, Y/W, Z/W, W) [Homogêneo]`\r\n\r\nDessa forma nesse trabalho, representaremos os vértices dos objetos, como pontos no espaço homogêneo, e usaremos inicialmente 'W=1' para simplificar, desse forma: `[Euclidiano] (X, Y, Z) ⇒ (X, Y, Z, 1) [Homogêneo]`\r\n\r\nEntão basicamente aplicaremos um conjunto de transformações, que levará o objeto entre os seguintes espaços:\r\n\r\n![Passos do Pipeline](https://soaresgabriel.github.io/PipelineICG/images/pipelinespaces.png)\r\n\r\nComo já mencionado, temos um arquivo .obj que contem as informações do objeto em seu espaço, vamos agora ao primeiro conjunto de transformações:\r\n\r\n# Espaço do Objeto ⇒ Espaço do Universo\r\nPor conveniência os objetos são descritos num sistema de coordenadas próprio, denomidado o Espaço do Objeto, dessa forma cada objeto tem seu próprio espaço. Precisamos agora levar os objetos para um espaço em comum, onde todos os objetos estarão, esse espaço é denominado o Espaço do Universo.\r\n\r\n![Levando objetos para o Espaço do Universo](https://soaresgabriel.github.io/PipelineICG/images/objecttouniverse.png)\r\n\r\nA transformação do espaço do Objeto para o Universo, se da simplesmente com transformações geométricas nos objetos, no exemplo acima, os dois objetos sofreram uma translação. Nos focaremos nas transformações mais fundamentais: Escala, Rotação e Translação, pois outras transformações podem ser obtidas como combinações dessas.\r\n\r\n## Escala\r\nA escala é simplesmente a mudança no tamanho do objeto, podemos alterar o tamanho do objeto igualmente entre todos os eixos (Escala Isotrópica), ou aplicar escalas diferentes para alguns eixos (Escala Anisotrópica), dessa forma, deformando o objeto.\r\n\r\n![Escalas](https://soaresgabriel.github.io/PipelineICG/images/Scales.png)\r\n\r\nSendo Sx, Sy e Sz, os fatores de escala para cada eixo, basicamente o que queremos é transformar o objeto da seguinte forma(Já usando a coordenada homogênea):\r\n\r\n`(X, Y, Z, 1) ⇒ (Sx*X, Sy*Y, Sz*Z, 1)`\r\n\r\nPodemos obter esse resultado multiplicando o vértice no formato Vetor Coluna, pela Matriz de Escala, da seguinte forma:\r\n\r\n![Matriz de Escala](https://soaresgabriel.github.io/PipelineICG/images/ScaleOperation.png)\r\n\r\nObserve que também conseguimos espalhar um objeto simplesmente aplicando uma escala negativa:\r\n\r\n![Espelhamento](https://soaresgabriel.github.io/PipelineICG/images/mirroring.png)\r\n\r\n## Rotação\r\nImagine um vetor w=(x,y) no plano, podemos representa-lo em coordenadas polares por `w=(r*cos(α), r*sen(α))`, onde r é a distância do ponto a origem, e α é o ângulo formado entre o vetor e o eixo x.\r\nAgora queremos rotacionar esse vetor a um certo ângulo θ, obtendo o vetor `w'=(x', y')=(r*cos(α+θ), r*sen(α+θ))`, como na imagem:\r\n\r\n![Rotacionando Vetor](https://soaresgabriel.github.io/PipelineICG/images/rotatingw.png)\r\n\r\nPelas propriedades de seno e cosseno, temos que:\r\n\r\n> x'=r*cos(α+θ)=r*cos(α)cos(θ)−r*sin(α)sin(θ)\r\n\r\n> y'=r*sen(α+θ)=r*sin(α)cos(θ)+r*cos(α)sin(θ)\r\n\r\nSubstituindo `x=r*cos(α)` e `y=r*sen(α)` nas equações anterior, temos que:\r\n\r\n> x'=x*cos(θ)−y*sin(θ)\r\n\r\n> y'=x*sin(θ)+y*cos(θ)\r\n\r\nDessa forma, poderíamos montar nossa matriz de rotação para esse caso, da seguinte forma:\r\n\r\n![Matriz de Rotação 2D](https://soaresgabriel.github.io/PipelineICG/images/RotationMatrix2D.png)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}